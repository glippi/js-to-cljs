{"version":3,"sources":["sci/impl/utils.cljc"],"mappings":"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","names":["cljs.core.derive","sci.impl.utils/constant?","x","cljs.core/Keyword","cljs.core/boolean?","js/RegExp","var_args","G__15261","sci.impl.utils/throw-error-with-location","js/Error","msg","iobj","sci.impl.utils.throw_error_with_location","data","map__15262","cljs.core/--destructure-map","line","cljs.core.get","column","file","cljs.core/deref","sci.impl.vars/current-file","cljs.core/meta","cljs.core.ex_info","cljs.core.merge","sci.impl.utils/*in-try*","sci.impl.utils/macro?","f","temp__5808__auto__","m","or__5045__auto__","sci.impl.utils/needs-ctx","cljs.core.symbol","sci.impl.utils/allowed-append","G__15264","sci.impl.utils/rethrow-with-location-of-node","ctx","e","raw-node","sci.impl.utils.rethrow_with_location_of_node","_bindings","stack","sci.impl.types/stack","env","id","d","cljs.core/ex-data","st","temp__5804__auto__","cljs.core/volatile!","cljs.core/-vreset!","cljs.core/-deref","cljs.core.conj","wrapping-sci-error?","cljs.core.isa_QMARK_","map__15265","ex-msg","G__15266","cljs.core/last","and__5043__auto__","new-exception","new-d","sci.impl.utils/iobj?","obj","cljs.core/PROTOCOL_SENTINEL","args__5775__auto__","len__5769__auto__","i__5770__auto__","argseq__5776__auto__","cljs.core/IndexedSeq","sci.impl.utils/vary-meta*","seq15270","G__15272","cljs.core/first","cljs.core/next","G__15273","self__5754__auto__","args","cljs.core.apply","cljs.core/vary-meta","sci.impl.utils/strip-core-ns","sym","G__15283","cljs.core/namespace","cljs.core/name","sci.impl.utils/allowed-loop","sci.impl.utils/allowed-recur","sci.impl.utils/var-unbound","js/Object","sci.impl.utils/walk*","inner","form","cljs.core/list?","cljs.core/with-meta","cljs.core/list","cljs.core.map","cljs.core/map-entry?","cljs.core/MapEntry","G__15289","cljs.core/key","G__15290","cljs.core/val","cljs.core/seq?","cljs.core.doall","cljs.core/record?","cljs.core.reduce","r","cljs.core/coll?","cljs.core.into","cljs.core/empty","sci.impl.utils/prewalk","cljs.core.partial","sci.impl.utils/namespace-object","ns-sym","create?","attr-map","env*","ns-map","cljs.core.get_in","ns-obj","sci.impl.vars/->SciNamespace","cljs.core.swap_BANG_","cljs.core/assoc-in","sci.impl.utils/set-namespace!","sci.impl.vars/current-ns","sci.impl.utils/eval-form-state","sci.impl.utils/eval-require-state","sci.impl.utils/eval-use-state","sci.impl.utils/eval-resolve-state","sci.impl.utils/eval-refer-state","sci.impl.utils/macroexpand*","sci.impl.utils/macroexpand-1*","sci.impl.utils/eval-do*","sci.impl.utils/eval-fn","sci.impl.utils/eval-string*","sci.impl.utils/lookup","sci.impl.utils/eval","sci-ctx","fexpr__15306","sci.impl.utils/split-when","pred","coll","cljs.core/LazySeq","s","cljs.core/seq","fst","cljs.core/complement","run","cljs.core/cons","p1__15307#","cljs.core.take_while","G__15308","G__15309","cljs.core.drop","cljs.core/count","sci.impl.utils/ana-macros","sci.impl.utils/maybe-destructured","params","body","cljs.core/every?","cljs.core/symbol?","new-params","lets","cljs.core.sequence","cljs.core.concat","cljs.core/List","cljs.core/Symbol","gparam","cljs.core.gensym","sci.impl.utils/log","seq15310","self__5755__auto__","xs","js/console","clojure.string.join"],"sourcesContent":["(ns sci.impl.utils\n  {:no-doc true}\n  (:refer-clojure :exclude [eval])\n  (:require [clojure.string :as str]\n            [sci.impl.macros :as macros]\n            [sci.impl.types :as t]\n            [sci.impl.vars :as vars])\n  #?(:cljs (:require-macros [sci.impl.utils :refer [kw-identical?]])))\n\n#?(:clj (set! *warn-on-reflection* true))\n\n(derive :sci.error/realized-beyond-max :sci/error)\n(derive :sci.error/parse :sci/error)\n\n(defn constant? [x]\n  (or (nil? x)\n      (number? x)\n      (string? x)\n      (keyword? x)\n      (boolean? x)\n      #?(:clj\n         (instance? java.util.regex.Pattern x)\n         :cljs\n         (instance? js/RegExp x))))\n\n(defmacro kw-identical? [k v]\n  (macros/?\n   :clj `(identical? ~k ~v)\n   :cljs `(cljs.core/keyword-identical? ~k ~v)))\n\n(defn throw-error-with-location\n  ([msg iobj] (throw-error-with-location msg iobj {}))\n  ([msg iobj data]\n   (let [{:keys [:line :column :file]\n          :or {file @vars/current-file}} (meta iobj)]\n     (throw (ex-info msg (merge {:type :sci/error\n                                 :line line\n                                 :column column\n                                 :file file} data))))))\n\n(def ^:dynamic *in-try* false)\n\n(defn macro? [f]\n  (when-some [m (meta f)]\n    (or (:sci/macro m)\n        (:macro m))))\n\n(def needs-ctx (symbol \"needs-ctx\"))\n\n#?(:cljs\n   (def allowed-append \"used for allowing interop in with-out-str\"\n     (symbol \"append\")))\n\n#?(:clj\n   (defn rewrite-ex-msg [ex-msg env fm]\n     (if ex-msg\n       (let [[_ printed-fn] (re-matches #\"Wrong number of args \\(\\d+\\) passed to: (.*)\" ex-msg)\n             fn-pat #\"(sci\\.impl\\.)?fns/fun/arity-([0-9])+--\\d+\"\n             [match _prefix arity] (re-find fn-pat ex-msg)\n             prefix \"sci.impl.\"\n             friendly-name (when arity (str \"function of arity \" arity))\n             ex-msg (if (:name fm)\n                      (let [ns (symbol (str (:ns fm)))\n                            var-name (:name fm)\n                            var (get-in @env [:namespaces ns var-name])\n                            fstr (when var (let [varf (if (instance? clojure.lang.IDeref var)\n                                                        (deref var)\n                                                        var)\n                                                 varf (or\n                                                       ;; resolve macro inner fn for comparison\n                                                       (some-> varf meta :sci.impl/inner-fn)\n                                                       varf)\n                                                 fstr (clojure.lang.Compiler/demunge (str varf))\n                                                 fstr (first (str/split fstr #\"@\"))\n                                                 fstr (str/replace fstr (re-pattern (str \"^\" prefix)) \"\")]\n                                             fstr))]\n                        (cond (and fstr printed-fn (= fstr printed-fn))\n                              (str/replace ex-msg printed-fn\n                                           (str (:ns fm) \"/\" (:name fm)))\n                              friendly-name (str/replace ex-msg match friendly-name)\n                              :else ex-msg))\n                      ex-msg)]\n         ex-msg)\n       ex-msg)))\n\n(defn rethrow-with-location-of-node\n  ([ctx ^Throwable e raw-node] (rethrow-with-location-of-node ctx (:bindings ctx) e raw-node))\n  ([ctx _bindings ^Throwable e raw-node]\n   (if #?(:clj (or *in-try*\n                   (not= (:main-thread-id ctx)\n                         (.getId (Thread/currentThread))))\n          :cljs *in-try*) (throw e)\n       (let [stack (t/stack raw-node)\n             #?@(:clj [fm (:sci.impl/f-meta stack)])\n             env (:env ctx)\n             id (:id ctx)\n             d (ex-data e)\n             st (or (when-let [st (:sci.impl/callstack d)]\n                      st)\n                    (volatile! '()))]\n         (when stack\n           (when-not (:special stack)\n             (vswap! st conj stack)))\n         (let [d (ex-data e)\n               ;; st (:sci.impl/callstack d)\n               wrapping-sci-error? (isa? (:type d) :sci/error)]\n           (if wrapping-sci-error?\n             (throw e)\n             (let [ex-msg #?(:clj (.getMessage e)\n                             :cljs (.-message e))\n                   {:keys [:line :column :file]}\n                   (or stack\n                       (some-> env deref\n                               :sci.impl/callstack (get id)\n                               deref last meta)\n                       #_(meta node))]\n               (if (and line column)\n                 (let [ex-msg #?(:clj (rewrite-ex-msg ex-msg env fm)\n                                 :cljs ex-msg)\n                       new-exception\n                       (let [new-d {:type :sci/error\n                                    :line line\n                                    :column column\n                                    :message ex-msg\n                                    :sci.impl/callstack st\n                                    :file file}]\n                         (ex-info ex-msg new-d e))]\n                   (throw new-exception))\n                 (throw e)))))))))\n\n(defn- iobj? [obj]\n  (and #?(:clj (instance? clojure.lang.IObj obj)\n          :cljs (implements? IWithMeta obj))\n       (meta obj)))\n\n(defn vary-meta*\n  \"Only adds metadata to obj if d is not nil and if obj already has meta\"\n  [obj f & args]\n  (if (iobj? obj)\n    (apply vary-meta obj f args)\n    obj))\n\n(defn strip-core-ns [sym]\n  (case (namespace sym)\n    (\"clojure.core\" \"cljs.core\") (symbol (name sym))\n    sym))\n\n(def allowed-loop (symbol \"loop\"))\n(def allowed-recur (symbol \"recur\"))\n(def var-unbound #?(:clj (Object.)\n                    :cljs (js/Object.)))\n\n(defn walk*\n  [inner form]\n  (cond\n    (:sci.impl/op (meta form)) form\n    (list? form) (with-meta (apply list (map inner form))\n                   (meta form))\n    #?(:clj (instance? clojure.lang.IMapEntry form) :cljs (map-entry? form))\n    #?(:clj (clojure.lang.MapEntry/create (inner (key form)) (inner (val form)))\n       :cljs (MapEntry. (inner (key form)) (inner (val form)) nil))\n    (seq? form) (with-meta (doall (map inner form))\n                  (meta form))\n    #?(:clj (instance? clojure.lang.IRecord form)\n       :cljs (record? form))\n    (reduce (fn [r x] (conj r (inner x))) form form)\n    (coll? form) (into (empty form) (map inner form))\n    :else form))\n\n(defn prewalk\n  \"Prewalk with metadata preservation. Does not prewalk :sci.impl/op nodes.\"\n  [f form]\n  (walk* (partial prewalk f) (f form)))\n\n(defn namespace-object\n  \"Fetches namespaces from env if it exists. Else, if `create?`,\n  produces one regardless of the existince of the namespace in env and\n  adds it to env before returning it.\"\n  [env ns-sym create? attr-map]\n  (let [env* @env\n        ns-map (get-in env* [:namespaces ns-sym])]\n    (or (:obj ns-map)\n        (when (or ns-map create?)\n          (let [ns-obj (vars/->SciNamespace ns-sym attr-map)]\n            (swap! env assoc-in [:namespaces ns-sym :obj] ns-obj)\n            ns-obj)))))\n\n(defn set-namespace! [ctx ns-sym attr-map]\n  (let [env (:env ctx)\n        attr-map (merge (meta ns-sym) attr-map)\n        ns-obj (namespace-object env ns-sym true attr-map)]\n    (t/setVal vars/current-ns ns-obj)))\n\n(def eval-form-state (volatile! nil))\n(def eval-require-state (volatile! nil))\n(def eval-use-state (volatile! nil))\n(def eval-resolve-state (volatile! nil))\n(def eval-refer-state (volatile! nil))\n(def macroexpand* (volatile! nil))\n(def macroexpand-1* (volatile! nil))\n(def eval-do* (volatile! nil))\n(def eval-fn (volatile! nil))\n(def eval-string* (volatile! nil))\n(def lookup (volatile! nil))\n\n(defn eval [sci-ctx form]\n  (@eval-form-state sci-ctx form))\n\n(defn split-when\n  \"Like partition-by but splits collection only when `pred` returns\n  a truthy value. E.g. `(split-when odd? [1 2 3 4 5]) => ((1 2) (3 4) (5))`\"\n  [pred coll]\n  (lazy-seq\n   (when-let [s (seq coll)]\n     (let [fst (first s)\n           f (complement pred)\n           run (cons fst (take-while #(f %) (next s)))]\n       (cons run (split-when pred (lazy-seq (drop (count run) s))))))))\n\n(def ana-macros\n  '#{do if and or let fn fn* def defn\n     loop lazy-seq case try defmacro\n     expand-dot* expand-constructor new . import in-ns ns var\n     set! resolve})\n\n(defn maybe-destructured\n  [params body]\n  (if (every? symbol? params)\n    {:params params\n     :body body}\n    (loop [params params\n           new-params (with-meta [] (meta params))\n           lets []]\n      (if params\n        (if (symbol? (first params))\n          (recur (next params) (conj new-params (first params)) lets)\n          (let [gparam (gensym \"p__\")]\n            (recur (next params) (conj new-params gparam)\n                   (-> lets (conj (first params)) (conj gparam)))))\n        {:params new-params\n         :body [`(let ~lets\n                   ~@body)]}))))\n\n(defn log [& xs]\n  #?(:clj (.println System/err (str/join \" \" xs))\n     :cljs (.log js/console (str/join \" \" xs))))\n"]}