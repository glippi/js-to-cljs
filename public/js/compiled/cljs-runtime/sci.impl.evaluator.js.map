{"version":3,"sources":["sci/impl/evaluator.cljc"],"mappings":"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","names":["sci.impl.evaluator/macros","sci.impl.evaluator/eval-and","ctx","bindings","args","cljs.core/seq","x","cljs.core/first","v","sci.impl.types/eval","xs","cljs.core/next","sci.impl.evaluator/eval-or","sci.impl.evaluator/eval-let","let-bindings","exprs","idxs","vec__15830","cljs.core.nth","idx","let-name","cljs.core/rest","let-val","rest-let-bindings","sci.impl.evaluator/eval-def","var-name","init","m","cnn","sci.impl.vars/getName","assoc-in-env","env","the-current-ns","cljs.core.get","prev","sci.impl.vars/var?","sci.impl.vars/->SciVar","cljs.core.symbol","cljs.core/meta","sci.impl.utils/var-unbound","G__15837","cljs.core.alter_meta_BANG_","cljs.core/merge","sci.impl.vars/bindRoot","cljs.core.assoc","cljs.core/assoc-in","cljs.core.swap_BANG_","var_args","G__15844","sci.impl.evaluator/eval-case","js/Error","case-map","case-val","temp__5802__auto__","vec__15848","_","found","cljs.core/find","case-default","vec__15852","sci.impl.evaluator/eval-try","body","catches","finally","e15856","*in-try*-orig-val__15863","*in-try*-temp-val__15864","sci.impl.utils/*in-try*","e","vec__15859","r","cljs.core.reduce","c","clazz","or__5045__auto__","cljs.core/keyword-identical?","sci.impl.types/NodeR","c__5078__auto__","x__5079__auto__","cljs.core/reduced","sci.impl.utils.rethrow_with_location_of_node","sci.impl.evaluator/eval-static-method-invocation","expr","sci.impl.interop/invoke-static-method","p1__15866#","cljs.core.map","sci.impl.evaluator/eval-instance-method-invocation","instance-expr","method-str","field-access","allowed","instance-meta","tag-class","instance-expr*","and__5043__auto__","cljs.core/map?","cljs.core.keyword","instance-class","cljs.core/type","class->opts","allowed?","instance-class-name","instance-class-symbol","js/console","target-class","temp__5804__auto__","f","sci.impl.utils.throw_error_with_location","sci.impl.interop/invoke-instance-field","p1__15869#","sci.impl.interop/invoke-instance-method","G__15880","sci.impl.evaluator/eval-resolve","sym","sci.impl.evaluator.eval_resolve","cljs.core/not","cljs.core/contains?","res","cljs.core/second","fexpr__15883","cljs.core/deref","sci.impl.utils/lookup","cljs.core/vreset!","sci.impl.utils/eval-resolve-state","args__5775__auto__","len__5769__auto__","i__5770__auto__","argseq__5776__auto__","cljs.core/IndexedSeq","sci.impl.evaluator/eval-import","seq15885","G__15886","self__5754__auto__","import-symbols-or-lists","specs","p1__15884#","cljs.core/seq?","cljs.core._EQ_","spec","vec__15891","package","classes","cljs.core/Symbol","s","last-dot","clojure.string.last_index_of","package+class-name","cljs.core.subs","p","cs","class","fq-class-name","sci.impl.interop/resolve-class","sci.impl.vars/current-ns-name","rec","sci.impl.records.resolve_record_or_protocol_class","sci.impl.evaluator/eval-do","ret","sci.impl.utils/eval-do*","cljs.core.mapv","p1__15580#","cljs.core.apply","cljs.core/count","sci.impl.evaluator/fn-call","G__16108","arg15911","arg15912","arg15913","arg15914","arg15915","arg15916","arg15917","arg15918","arg15919","arg15920","arg15921","arg15922","arg15923","arg15924","arg15925","arg15926","arg15927","arg15928","arg15929","arg15930","arg15931","arg15932","arg15933","arg15934","arg15935","arg15936","arg15937","arg15938","arg15939","arg15940","arg15941","arg15942","arg15943","arg15944","arg15945","arg15946","arg15947","arg15948","arg15949","arg15950","arg15951","arg15952","arg15953","arg15954","arg15955","arg15956","arg15958","arg15959","arg15960","arg15961","arg15963","arg15965","arg15966","arg15967","arg15968","arg15969","arg15970","arg15971","arg15972","arg15973","arg15974","arg15975","arg15976","arg15977","arg15978","arg15979","arg15980","arg15981","arg15982","arg15983","arg15984","arg15985","arg15986","arg15987","arg15988","arg15989","arg15990","arg15991","arg15992","arg15993","arg15994","arg15995","arg15996","arg15997","arg15998","arg15999","arg16000","arg16001","arg16002","arg16003","arg16004","arg16005","arg16006","arg16007","arg16008","arg16009","arg16010","arg16011","arg16012","arg16013","arg16014","arg16015","arg16016","arg16017","arg16018","arg16019","arg16020","arg16021","arg16022","arg16023","arg16024","arg16025","arg16026","arg16027","arg16028","arg16029","arg16030","arg16031","arg16032","arg16033","arg16034","arg16035","arg16036","arg16037","arg16038","arg16039","arg16040","arg16041","arg16042","arg16043","arg16044","arg16045","arg16046","arg16047","arg16048","arg16049","arg16050","arg16051","arg16052","arg16053","arg16054","arg16055","arg16056","arg16057","arg16058","arg16059","arg16060","arg16061","arg16062","arg16063","arg16064","arg16065","arg16066","arg16071","arg16072","arg16073","arg16074","arg16075","arg16076","arg16077","arg16078","arg16079","arg16080","arg16081","arg16082","arg16083","arg16084","arg16085","arg16086","arg16087","arg16088","arg16089","arg16090","arg16091","arg16092","arg16093","arg16094","arg16095","arg16096","arg16097","arg16098","arg16099","arg16100","arg16101","arg16102","arg16103","arg16104","arg16105","arg16106","arg16107"],"sourcesContent":["(ns sci.impl.evaluator\n  {:no-doc true}\n  (:refer-clojure :exclude [eval])\n  (:require\n   [clojure.string :as str]\n   [sci.impl.interop :as interop]\n   [sci.impl.macros :as macros]\n   [sci.impl.records :as records]\n   [sci.impl.types :as types]\n   [sci.impl.utils :as utils :refer [throw-error-with-location\n                                     rethrow-with-location-of-node\n                                     kw-identical?]]\n   [sci.impl.vars :as vars])\n  #?(:cljs (:require-macros [sci.impl.evaluator :refer [def-fn-call resolve-symbol]])))\n\n(declare fn-call)\n\n#?(:clj (set! *warn-on-reflection* true))\n\n(def #?(:clj ^:const macros :cljs macros)\n  '#{do fn def defn\n     syntax-quote})\n\n;;;; Evaluation\n\n(defn eval-and\n  \"The and macro from clojure.core. Note: and is unrolled in the analyzer, this is a fallback.\"\n  [ctx bindings args]\n  (let [args (seq args)]\n    (loop [args args]\n      (if args\n        (let [x (first args)\n              v (types/eval x ctx bindings)]\n          (if v\n            (let [xs (next args)]\n              (if xs\n                (recur xs) v)) v))\n        true))))\n\n(defn eval-or\n  \"The or macro from clojure.core. Note: or is unrolled in the analyzer, this is a fallback.\"\n  [ctx bindings args]\n  (let [args (seq args)]\n    (loop [args args]\n      (when args\n        (let [x (first args)\n              v (types/eval x ctx bindings)]\n          (if v v\n              (let [xs (next args)]\n                (if xs (recur xs)\n                    v))))))))\n\n(defn eval-let\n  \"The let macro from clojure.core\"\n  [ctx bindings let-bindings exprs idxs]\n  (let [[ctx bindings] (loop [ctx ctx\n                              bindings bindings\n                              let-bindings let-bindings\n                              idx 0]\n                         (let [let-name (first let-bindings)]\n                           (if let-name\n                             (let [let-bindings (rest let-bindings)\n                                   let-val (first let-bindings)\n                                   rest-let-bindings (next let-bindings)\n                                   v (types/eval let-val ctx bindings)\n                                   ;; bindings (faster/get-2 ctx :bindings)\n                                   ;; ctx (faster/assoc-3 ctx :bindings bindings)\n                                   ]\n                               (aset ^objects bindings (nth idxs idx) v)\n                               (recur ctx bindings\n                                      rest-let-bindings\n                                      (inc idx)))\n                             [ctx bindings])))]\n    (types/eval exprs ctx bindings)))\n\n(defn eval-def\n  [ctx bindings var-name init m]\n  (let [init (types/eval init ctx bindings)\n        m (types/eval m ctx bindings)\n        cnn (vars/getName (:ns m))\n        assoc-in-env\n        (fn [env]\n          (let [the-current-ns (get (get env :namespaces) cnn)\n                prev (get the-current-ns var-name)\n                prev (if-not (vars/var? prev)\n                       (vars/->SciVar prev (symbol (str cnn) (str var-name))\n                                      (meta prev)\n                                      false)\n                       prev)\n                v (if (identical? utils/var-unbound init)\n                    (doto prev\n                      (alter-meta! merge m))\n                    (do (vars/bindRoot prev init)\n                        (alter-meta! prev merge m)\n                        prev))\n                the-current-ns (assoc the-current-ns var-name v)]\n            (assoc-in env [:namespaces cnn] the-current-ns)))\n        env (swap! (:env ctx) assoc-in-env)]\n    ;; return var\n    (get (get (get env :namespaces) cnn) var-name)))\n\n(defmacro resolve-symbol [bindings sym]\n  `(.get ~(with-meta bindings\n            {:tag 'java.util.Map}) ~sym))\n\n(declare eval-string*)\n\n(defn eval-case\n  ([ctx bindings case-map case-val]\n   (let [v (types/eval case-val ctx bindings)]\n     (if-let [[_ found] (find case-map v)]\n       (types/eval found ctx bindings)\n       (throw (new #?(:clj IllegalArgumentException :cljs js/Error)\n                   (str \"No matching clause: \" v))))))\n  ([ctx bindings case-map case-val case-default]\n   (let [v (types/eval case-val ctx bindings)]\n     (if-let [[_ found] (find case-map v)]\n       (types/eval found ctx bindings)\n       (types/eval case-default ctx bindings)))))\n\n(defn eval-try\n  [ctx bindings body catches finally]\n  (try\n    (binding [utils/*in-try* true]\n      (types/eval body ctx bindings))\n    (catch #?(:clj Throwable :cljs :default) e\n      (if-let\n          [[_ r]\n           (reduce (fn [_ c]\n                     (let [clazz (:class c)]\n                       (when #?(:cljs\n                                (or (kw-identical? :default clazz)\n                                    (if (instance? sci.impl.types/NodeR clazz)\n                                      (instance? (types/eval clazz ctx bindings) e)\n                                      (instance? clazz e)))\n                                :clj (instance? clazz e))\n                         (reduced\n                          [::try-result\n                           (do (aset ^objects bindings (:ex-idx c) e)\n                               (types/eval (:body c) ctx bindings))]))))\n                   nil\n                   catches)]\n        r\n        (rethrow-with-location-of-node ctx bindings e body)))\n    (finally\n      (types/eval finally ctx bindings))))\n\n;;;; Interop\n\n(defn eval-static-method-invocation [ctx bindings expr]\n  (interop/invoke-static-method (first expr)\n                                ;; eval args!\n                                (map #(types/eval % ctx bindings) (rest expr))))\n\n#?(:clj\n   (defn super-symbols [clazz]\n     ;; (prn clazz '-> (map #(symbol (.getName ^Class %)) (supers clazz)))\n     (map #(symbol (.getName ^Class %)) (supers clazz))))\n\n(defn eval-instance-method-invocation\n  [ctx bindings instance-expr method-str field-access args #?(:cljs allowed)]\n  (let [instance-meta (meta instance-expr)\n        tag-class (:tag-class instance-meta)\n        instance-expr* (types/eval instance-expr ctx bindings)]\n    (if (and (map? instance-expr*)\n             (:sci.impl/record (meta instance-expr*))) ;; a sci record\n      (get instance-expr* (keyword\n                           ;; TODO: strip leading dash in analyzer\n                           method-str))\n      (let [instance-class (or tag-class (#?(:clj class :cljs type) instance-expr*))\n            class->opts (:class->opts ctx)\n            allowed? (or\n                      #?(:cljs allowed)\n                      (get class->opts :allow)\n                      (let [instance-class-name #?(:clj (.getName ^Class instance-class)\n                                                   :cljs (.-name instance-class))\n                            instance-class-symbol (symbol instance-class-name)]\n                        (get class->opts instance-class-symbol))\n                      #?(:cljs (.log js/console (str method-str))))\n            ^Class target-class (if allowed? instance-class\n                                    (when-let [f (:public-class ctx)]\n                                      (f instance-expr*)))]\n        ;; we have to check options at run time, since we don't know what the class\n        ;; of instance-expr is at analysis time\n        (when-not #?(:clj target-class\n                     :cljs allowed?)\n          (throw-error-with-location (str \"Method \" method-str \" on \" instance-class \" not allowed!\") instance-expr))\n        (if field-access\n          (interop/invoke-instance-field instance-expr* target-class method-str)\n          (let [args (map #(types/eval % ctx bindings) args)] ;; eval args!\n            (interop/invoke-instance-method instance-expr* target-class method-str args)))))))\n\n;;;; End interop\n\n;;;; Namespaces\n\n(declare eval-form)\n\n(defn eval-resolve\n  ([ctx bindings sym]\n   (eval-resolve ctx bindings nil sym))\n  ([ctx bindings env sym]\n   (when (or (not env)\n             (not (contains? env sym)))\n     (let [sym (types/eval sym ctx bindings)\n           res (second (@utils/lookup ctx sym false))]\n       (when-not #?(:cljs (instance? sci.impl.types/NodeR res)\n                    :clj (instance? sci.impl.types.Eval res))\n         res)))))\n\n(vreset! utils/eval-resolve-state eval-resolve)\n\n;;;; End namespaces\n\n;;;; Import\n\n(defn eval-import [ctx & import-symbols-or-lists]\n  ;;(prn import-symbols-or-lists)\n  (let [specs (map #(if (and (seq? %) (= 'quote (first %))) (second %) %)\n                   import-symbols-or-lists)\n        env (:env ctx)]\n    (reduce (fn [_ spec]\n              (let [[package classes]\n                    (if (symbol? spec)\n                      (let [s (str spec)\n                            last-dot (str/last-index-of s \".\")\n                            package+class-name\n                            (if last-dot\n                              [(symbol (subs s 0 last-dot))\n                               [(symbol (subs s (inc last-dot) (count s)))]]\n                              [nil [spec]])]\n                        package+class-name)\n                      (let [p (first spec)\n                            cs (rest spec)]\n                        [p cs]))]\n                (reduce (fn [_ class]\n                          (let [fq-class-name (symbol (if package (str package \".\" class)\n                                                          class))]\n                            (if-let [clazz (interop/resolve-class ctx fq-class-name)]\n                              (let [cnn (vars/current-ns-name)]\n                                (swap! env assoc-in [:namespaces cnn :imports class] fq-class-name)\n                                clazz)\n                              (if-let [rec (records/resolve-record-or-protocol-class ctx package class)]\n                                (let [cnn (vars/current-ns-name)]\n                                  (swap! env assoc-in [:namespaces cnn class] rec)\n                                  rec)\n                                (throw (new #?(:clj Exception :cljs js/Error)\n                                            (str \"Unable to resolve classname: \" fq-class-name)))))))\n                        nil\n                        classes)))\n            nil\n            specs)))\n\n;;;; End import\n\n(declare eval-string)\n\n(defn eval-do\n  \"Note: various arities of do have already been unrolled in the analyzer.\"\n  [ctx bindings exprs]\n  (let [exprs (seq exprs)]\n    (loop [exprs exprs]\n      (when exprs\n        (let [ret (types/eval (first exprs) ctx bindings)]\n          (if-let [exprs (next exprs)]\n            (recur exprs)\n            ret))))))\n\n(vreset! utils/eval-do* eval-do)\n\n(macros/deftime\n  ;; This macro generates a function of the following form for 20 arities:\n  #_(defn fn-call [ctx bindings f args]\n      (case (count args)\n        0 (f)\n        1 (let [arg (eval ctx bindings (first args))]\n            (f arg))\n        2 (let [arg1 (eval ctx bindings (first args))\n                args (rest args)\n                arg2 (eval ctx bindings (first args))]\n            (f arg1 arg2))\n        ,,,\n        (let [args (mapv #(eval ctx bindings %) args)]\n          (apply f args))))\n  (defmacro def-fn-call []\n    (let [cases\n          (mapcat (fn [i]\n                    [i (let [arg-syms (map (fn [_] (gensym \"arg\")) (range i))\n                             args-sym 'args ;; (gensym \"args\")\n                             let-syms (interleave arg-syms (repeat args-sym))\n                             let-vals (interleave (repeat `(types/eval (first ~args-sym) ~'ctx ~'bindings))\n                                                  (repeat `(rest ~args-sym)))\n                             let-bindings (vec (interleave let-syms let-vals))]\n                         `(let ~let-bindings\n                            (~'f ~@arg-syms)))]) (range 20))\n          cases (concat cases ['(let [args (mapv #(types/eval % ctx bindings) args)]\n                                  (apply f args))])]\n      ;; Normal apply:\n      #_`(defn ~'fn-call ~'[ctx f args]\n           (apply ~'f (map #(eval ~'ctx %) ~'args)))\n      `(defn ~'fn-call ~'[ctx bindings f args]\n         ;; TODO: can we prevent hitting this at all, by analyzing more efficiently?\n         ;; (prn :count ~'f ~'(count args) ~'args)\n         (case ~'(count args)\n           ~@cases)))))\n\n(def-fn-call)\n\n;; The following types cannot be treated as constants in the analyzer\n#?(:clj (extend-protocol types/Eval\n          java.lang.Class\n          (eval [expr _ _]\n            expr)\n          clojure.lang.PersistentArrayMap\n          (eval [expr _ _]\n            expr)\n          clojure.lang.PersistentVector\n          (eval [expr _ _]\n            expr)\n          clojure.lang.Symbol\n          (eval [expr _ _]\n            expr)\n          sci.impl.vars.SciNamespace\n          (eval [expr _ _]\n            expr)\n          sci.impl.vars.SciVar\n          (eval [expr _ _]\n            expr)\n          clojure.lang.MultiFn\n          (eval [expr _ _]\n            expr)\n          Object\n          (eval [expr _ _]\n            expr)\n          ;; literal nils are treated like constants, but nil might also happen\n          ;; as a result of analysis\n          nil (eval [_ _ _] nil)))\n"]}