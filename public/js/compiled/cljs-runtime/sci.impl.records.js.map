{"version":3,"sources":["sci/impl/records.cljc"],"mappings":"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","names":["js/sci","js/sci.impl","js/sci.impl.records","js/sci.impl.records.to-string","method-table__5642__auto__","cljs.core.atom","prefer-table__5643__auto__","method-cache__5644__auto__","cached-hierarchy__5645__auto__","hierarchy__5646__auto__","cljs.core.get","fexpr__15313","cljs.core/MultiFn","cljs.core.symbol","sci.impl.records/to-string","sci.impl.types/type-impl","this","t","cljs.core/namespace","cljs.core/name","cljs.core/hash","sci.impl.records/clojure-str","v","cljs.core.into","this__5343__auto__","k__5344__auto__","this__5345__auto__","k15315","else__5346__auto__","G__15319","__extmap","this__5363__auto__","f__5364__auto__","init__5365__auto__","cljs.core.reduce","ret__5366__auto__","p__15323","vec__15324","k__5367__auto__","cljs.core.nth","v__5368__auto__","this__5358__auto__","writer__5359__auto__","opts__5360__auto__","pr-pair__5361__auto__","keyval__5362__auto__","cljs.core/pr-sequential-writer","cljs.core.concat","G__15314","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__5341__auto__","__meta","this__5338__auto__","__hash","this__5347__auto__","cljs.core/count","this__5339__auto__","h__5154__auto__","coll__5340__auto__","cljs.core/hash-unordered-coll","this15316","other15317","cljs.core._EQ_","this__5353__auto__","k__5354__auto__","cljs.core/contains?","cljs.core.dissoc","cljs.core/-with-meta","cljs.core/not-empty","this__5350__auto__","this__5351__auto__","k__5352__auto__","pred__15328","cljs.core/keyword-identical?","expr__15329","cljs.core.assoc","this__5356__auto__","cljs.core/seq","this__5342__auto__","this__5348__auto__","entry__5349__auto__","cljs.core/vector?","cljs.core/-nth","cljs.core/-conj","sci.impl.records/SciRecord","this__5389__auto__","cljs.core/List","writer__5390__auto__","cljs.core/-write","G__15318","extmap__5385__auto__","G__15331","cljs.core/record?","sci.impl.records/->SciRecord","sci.impl.records/map->SciRecord","cljs.core/PROTOCOL_SENTINEL","new-obj","writer","_","cljs.core.write_all","sci.impl.records/->record-impl","m","var_args","args__5775__auto__","len__5769__auto__","i__5770__auto__","argseq__5776__auto__","cljs.core/IndexedSeq","sci.impl.records/defrecord","seq15342","G__15343","cljs.core/first","cljs.core/next","G__15344","G__15345","G__15346","G__15347","self__5754__auto__","form","ctx","record-name","fields","raw-protocol-impls","cljs.core/cons","cljs.core/rest","cljs.core.sequence","cljs.core/vec","cljs.core.apply","cljs.core/array-map","factory-fn-str","factory-fn-sym","map-factory-sym","keys","cljs.core.mapv","cljs.core/keyword","rec-type","sci.impl.vars/current-ns-name","protocol-impls","sci.impl.utils/split-when","cljs.core/symbol?","field-set","cljs.core/set","cljs.core.mapcat","p__15351","vec__15352","seq__15353","first__15354","protocol-name","impls","expr","p1__15332#","cljs.core/group-by","protocol","G__15356","G__15357","G__15358","fexpr__15355","cljs.core/deref","sci.impl.utils/eval-resolve-state","or__5045__auto__","sci.impl.utils.throw_error_with_location","sci.impl.vars/var?","protocol-ns","pns","sci.impl.vars/getName","fq-meth-name","cljs.core/simple-symbol?","cljs.core.map","p__15359","vec__15360","method-name","bodies","impl","args","body","destr","sci.impl.utils/maybe-destructured","orig-this-sym","rest-args","shadows-this?","p1__15333#","cljs.core/some","this-sym","cljs.core.gensym","bindings","field","cljs.core.keyword","cljs.core/disj","sci.impl.records/sci-record?","x","cljs.core/map?","G__15363","cljs.core/meta","G__15365","sci.impl.records/resolve-record-or-protocol-class","js/Error","sym","sym-str","last-dot","clojure.string.last_index_of","class-name","cljs.core.subs","namespace","sci.impl.records.resolve_record_or_protocol_class","package","class","clojure.string/replace","temp__5804__auto__","sci-var","cljs.core.get_in","sci.impl.records/resolve-record-class","class-sym","cljs.core/Symbol"],"sourcesContent":["(ns sci.impl.records\n  {:no-doc true}\n  (:refer-clojure :exclude [defrecord record?])\n  (:require [clojure.string :as str]\n            [sci.impl.types :as types]\n            [sci.impl.utils :as utils]\n            [sci.impl.vars :as vars]))\n\n#?(:clj (set! *warn-on-reflection* true))\n\n#?(:clj\n   (defn assert-no-jvm-interface [protocol protocol-name expr]\n     (when (and (class? protocol)\n                (not (= Object protocol)))\n       (utils/throw-error-with-location\n        (str \"Records currently only support protocol implementations, found: \" protocol-name)\n        expr))))\n\n(defmulti to-string types/type-impl)\n(defmethod to-string :default [this]\n  (let [t (types/type-impl this)]\n    (str (namespace t) \".\" (name t) \"@\"\n         #?(:clj (Integer/toHexString (hash this))\n            :cljs (.toString (hash this) 16)))))\n\n(defn clojure-str [v]\n  (let [t (types/type-impl v)]\n    (str \"#\" (namespace t) \".\" (name t)\n         (into {} v))))\n\n(clojure.core/defrecord SciRecord []\n  Object\n  (toString [this]\n    (to-string this)))\n\n#?(:clj\n   (defmethod print-method SciRecord [v ^java.io.Writer w]\n     (.write w ^String (clojure-str v))))\n\n#?(:cljs ;; see https://www.mail-archive.com/clojure@googlegroups.com/msg99560.html\n   (extend-type SciRecord\n     IPrintWithWriter\n     (-pr-writer [new-obj writer _]\n       (write-all writer (clojure-str new-obj)))))\n\n(defn ->record-impl [m]\n  (map->SciRecord m))\n\n(defn defrecord [form _ ctx record-name fields & raw-protocol-impls]\n  (if (:sci.impl/macroexpanding ctx)\n    (cons 'clojure.core/defrecord (rest form))\n    (let [factory-fn-str (str \"->\" record-name)\n          factory-fn-sym (symbol factory-fn-str)\n          map-factory-sym (symbol (str \"map\" factory-fn-str))\n          keys (mapv keyword fields)\n          rec-type (symbol (str (vars/current-ns-name)) (str record-name))\n          protocol-impls (utils/split-when symbol? raw-protocol-impls)\n          field-set (set fields)\n          protocol-impls\n          (mapcat\n           (fn [[protocol-name & impls] #?(:clj expr :cljs expr)]\n             (let [impls (group-by first impls)\n                   protocol (@utils/eval-resolve-state ctx (:bindings ctx) protocol-name)\n                   #?@(:cljs [protocol (or protocol\n                                           (when (= 'Object protocol-name)\n                                             ::object))])\n                   _ (when-not protocol\n                       (utils/throw-error-with-location\n                        (str \"Protocol not found: \" protocol-name)\n                        expr))\n                   ;; #?@(:clj [_ (assert-no-jvm-interface protocol protocol-name expr)])\n                   protocol (if (vars/var? protocol) @protocol protocol)\n                   protocol-ns (:ns protocol)\n                   pns (cond protocol-ns (str (vars/getName protocol-ns))\n                             (= #?(:clj Object :cljs ::object) protocol) \"sci.impl.records\")\n                   fq-meth-name #(if (simple-symbol? %)\n                                   (symbol pns (str %))\n                                   %)]\n               (map (fn [[method-name bodies]]\n                      (let [bodies (map rest bodies)\n                            bodies (mapv (fn [impl]\n                                           (let [args (first impl)\n                                                 body (rest impl)\n                                                 destr (utils/maybe-destructured args body)\n                                                 args (:params destr)\n                                                 orig-this-sym (first args)\n                                                 rest-args (rest args)\n                                                 shadows-this? (some #(= orig-this-sym %) rest-args)\n                                                 this-sym (if shadows-this?\n                                                            (gensym \"this_\")\n                                                            orig-this-sym)\n                                                 args (if shadows-this?\n                                                        (vec (cons this-sym rest-args))\n                                                        args)\n                                                 bindings (mapcat (fn [field]\n                                                                    [field (list (keyword field) this-sym)])\n                                                                  (reduce disj field-set args))\n                                                 bindings (if shadows-this?\n                                                            (concat bindings [orig-this-sym this-sym])\n                                                            bindings)\n                                                 bindings (vec bindings)]\n                                             `(~args\n                                               (let ~bindings\n                                                 ~@body)))) bodies)]\n                        `(defmethod ~(fq-meth-name method-name) '~rec-type ~@bodies)))\n                    impls)))\n           protocol-impls\n           raw-protocol-impls)]\n      `(do\n         (defn ~map-factory-sym [m#]\n           (vary-meta (clojure.core/->record-impl m#)\n                      assoc\n                      ;; TODO: now that we're using the SciRecord type, we could move away from these metadata keys\n                      :sci.impl/record true\n                      :type '~rec-type))\n         (defn ~factory-fn-sym [& args#]\n           (vary-meta (clojure.core/->record-impl (zipmap ~keys args#))\n                      assoc\n                      :sci.impl/record true\n                      :type '~rec-type))\n         (def ~record-name (with-meta '~rec-type\n                             {:sci.impl/record true\n                              :sci.impl.record/map-constructor ~map-factory-sym\n                              :sci.impl.record/constructor ~factory-fn-sym}))\n         ~@protocol-impls))))\n\n(defn sci-record? [x]\n  (or\n   (when (map? x)\n     (some-> x meta :sci.impl/record))\n   (clojure.core/record? x)))\n\n(defn resolve-record-or-protocol-class\n  \"A record class is represented by a symbol with metadata (currently). This is only an implementation detail.\n   A protocol is represented by a map with :ns, :methods and optionally :class. This is also an implementation detail.\"\n  ;; TODO: we should probably use munging here for namespaces with hyphens in them.\n  ([ctx sym]\n   (let [sym-str (str sym)\n         last-dot (str/last-index-of sym-str \".\")\n         class-name (if last-dot\n                      (subs sym-str (inc last-dot) (count sym-str))\n                      sym-str)\n         namespace (if last-dot\n                     (symbol (subs sym-str 0 last-dot))\n                     (vars/current-ns-name))]\n     (resolve-record-or-protocol-class ctx namespace (symbol class-name))))\n  ([ctx package class]\n   (let [namespace (-> package str (str/replace \"_\" \"-\") symbol)]\n     (when-let [sci-var (get-in @(:env ctx) [:namespaces namespace class])]\n       (if (vars/var? sci-var)\n         @sci-var\n         sci-var)))))\n\n(defn resolve-record-class\n  [ctx class-sym]\n  (when-let [x (resolve-record-or-protocol-class ctx class-sym)]\n    (when (symbol? x) x)))\n"]}